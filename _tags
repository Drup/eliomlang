# OASIS_START
# DO NOT EDIT (digest: f84876c9e89115f0e41eff39c1dabbcf)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library eliom_typechecker
"compiler/eliom_typechecker.cmxs": use_eliom_typechecker
"compiler/typing/eliom_base.cmx": for-pack(Eliom_typechecker)
"compiler/typing/eliom_types.cmx": for-pack(Eliom_typechecker)
"compiler/typing/eliom_typing.cmx": for-pack(Eliom_typechecker)
"compiler/typing/annot.cmx": for-pack(Eliom_typechecker)
"compiler/typing/includemod.cmx": for-pack(Eliom_typechecker)
"compiler/typing/tast_mapper.cmx": for-pack(Eliom_typechecker)
"compiler/typing/btype.cmx": for-pack(Eliom_typechecker)
"compiler/typing/mtype.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typeclass.cmx": for-pack(Eliom_typechecker)
"compiler/typing/cmi_format.cmx": for-pack(Eliom_typechecker)
"compiler/typing/oprint.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typecore.cmx": for-pack(Eliom_typechecker)
"compiler/typing/cmt_format.cmx": for-pack(Eliom_typechecker)
"compiler/typing/outcometree.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typedecl.cmx": for-pack(Eliom_typechecker)
"compiler/typing/ctype.cmx": for-pack(Eliom_typechecker)
"compiler/typing/parmatch.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typedtreeIter.cmx": for-pack(Eliom_typechecker)
"compiler/typing/datarepr.cmx": for-pack(Eliom_typechecker)
"compiler/typing/path.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typedtreeMap.cmx": for-pack(Eliom_typechecker)
"compiler/typing/predef.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typedtree.cmx": for-pack(Eliom_typechecker)
"compiler/typing/envaux.cmx": for-pack(Eliom_typechecker)
"compiler/typing/primitive.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typemod.cmx": for-pack(Eliom_typechecker)
"compiler/typing/env.cmx": for-pack(Eliom_typechecker)
"compiler/typing/printtyped.cmx": for-pack(Eliom_typechecker)
"compiler/typing/types.cmx": for-pack(Eliom_typechecker)
"compiler/typing/ident.cmx": for-pack(Eliom_typechecker)
"compiler/typing/printtyp.cmx": for-pack(Eliom_typechecker)
"compiler/typing/typetexp.cmx": for-pack(Eliom_typechecker)
"compiler/typing/includeclass.cmx": for-pack(Eliom_typechecker)
"compiler/typing/stypes.cmx": for-pack(Eliom_typechecker)
"compiler/typing/untypeast.cmx": for-pack(Eliom_typechecker)
"compiler/typing/includecore.cmx": for-pack(Eliom_typechecker)
"compiler/typing/subst.cmx": for-pack(Eliom_typechecker)
"compiler/driver/compmisc.cmx": for-pack(Eliom_typechecker)
<compiler/*.ml{,i,y}>: package(compiler-libs.common)
<compiler/driver/*.ml{,i,y}>: package(compiler-libs.common)
<compiler/typing/*.ml{,i,y}>: package(compiler-libs.common)
# Library eliom_lang_ppx
"lib/eliom_lang_ppx.cmxs": use_eliom_lang_ppx
<lib/*.ml{,i,y}>: package(compiler-libs.common)
<lib/*.ml{,i,y}>: package(ppx_core)
<lib/*.ml{,i,y}>: package(ppx_tools)
<lib/*.ml{,i,y}>: package(ppx_tools.metaquot)
<lib/*.ml{,i,y}>: use_eliom_typechecker
# Library eliom_runtime_server
"runtime/server/eliom_runtime_server.cmxs": use_eliom_runtime_server
<runtime/server/*.ml{,i,y}>: package(re)
# Library eliom_runtime_client
"runtime/client/eliom_runtime_client.cmxs": use_eliom_runtime_client
<runtime/client/*.ml{,i,y}>: package(js_of_ocaml)
<runtime/client/*.ml{,i,y}>: package(js_of_ocaml.ppx)
# Library eliom_runtime_lwt
"runtime/lwt/eliom_runtime_lwt.cmxs": use_eliom_runtime_lwt
<runtime/lwt/*.ml{,i,y}>: package(lwt)
<runtime/lwt/*.ml{,i,y}>: package(re)
<runtime/lwt/*.ml{,i,y}>: use_eliom_runtime_server
# OASIS_STOP

# Work around ppx_core issues
<*/*.{native,byte}>: predicate(ppx_driver)

not <compiler/**>: warn(+A-4-6-9-40-42-44-48)
<compiler/**>: principal, warn(+33..39+48+50)
true: warn_error(+1..49)
true: strict_sequence, safe_string, short_paths, strict_formats
true: bin_annot

# Better locations and loc in .mlis
true: keep_locs

# We use the local typechecker in priority.
<lib/**> or <bin/**>: open(Eliom_typechecker)
