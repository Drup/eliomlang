# OASIS_START
# DO NOT EDIT (digest: a2b5c85c30327770ba3c17699ede8460)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library eliom_lang
"lib/eliom_lang.cmxs": use_eliom_lang
<lib/*.ml{,i,y}>: package(compiler-libs)
<lib/*.ml{,i,y}>: package(ppx_core)
<lib/*.ml{,i,y}>: package(ppx_tools)
<lib/*.ml{,i,y}>: package(ppx_tools.metaquot)
# Executable desugar
"utils/desugar.byte": package(compiler-libs)
"utils/desugar.byte": package(ppx_core)
"utils/desugar.byte": package(ppx_tools)
"utils/desugar.byte": package(ppx_tools.metaquot)
"utils/desugar.byte": use_eliom_lang
<utils/*.ml{,i,y}>: package(compiler-libs)
<utils/*.ml{,i,y}>: package(ppx_core)
<utils/*.ml{,i,y}>: package(ppx_tools)
<utils/*.ml{,i,y}>: package(ppx_tools.metaquot)
<utils/*.ml{,i,y}>: use_eliom_lang
# Executable eliomc
"src/main.byte": package(compiler-libs)
"src/main.byte": package(compiler-libs.bytecomp)
"src/main.byte": package(ppx_core)
"src/main.byte": package(ppx_tools)
"src/main.byte": package(ppx_tools.metaquot)
"src/main.byte": use_eliom_lang
<src/*.ml{,i,y}>: package(compiler-libs.bytecomp)
# Executable eliomopt
"src/optmain.byte": package(compiler-libs)
"src/optmain.byte": package(compiler-libs.optcomp)
"src/optmain.byte": package(ppx_core)
"src/optmain.byte": package(ppx_tools)
"src/optmain.byte": package(ppx_tools.metaquot)
"src/optmain.byte": use_eliom_lang
<src/*.ml{,i,y}>: package(compiler-libs)
<src/*.ml{,i,y}>: package(compiler-libs.optcomp)
<src/*.ml{,i,y}>: package(ppx_core)
<src/*.ml{,i,y}>: package(ppx_tools)
<src/*.ml{,i,y}>: package(ppx_tools.metaquot)
<src/*.ml{,i,y}>: use_eliom_lang
# OASIS_STOP

true: warn(+A-4-6-9-40-42-44-48)
true: warn_error(+1..49)
true: strict_sequence, safe_string, short_paths
true: bin_annot

# Better locations and loc in .mlis
true: keep_locs
